// Code generated by MockGen. DO NOT EDIT.
// Source: internal/provider/provider.go

// Package mock_provider is a generated GoMock package.
package mimirtool

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	rwrulefmt "github.com/grafana/mimir/pkg/mimirtool/rules/rwrulefmt"
)

// MockMimirClientInterface is a mock of MimirClientInterface interface.
type MockMimirClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMimirClientInterfaceMockRecorder
}

// MockMimirClientInterfaceMockRecorder is the mock recorder for MockMimirClientInterface.
type MockMimirClientInterfaceMockRecorder struct {
	mock *MockMimirClientInterface
}

// NewMockMimirClientInterface creates a new mock instance.
func NewMockMimirClientInterface(ctrl *gomock.Controller) *MockMimirClientInterface {
	mock := &MockMimirClientInterface{ctrl: ctrl}
	mock.recorder = &MockMimirClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMimirClientInterface) EXPECT() *MockMimirClientInterfaceMockRecorder {
	return m.recorder
}

// CreateAlertmanagerConfig mocks base method.
func (m *MockMimirClientInterface) CreateAlertmanagerConfig(ctx context.Context, cfg string, templates map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAlertmanagerConfig", ctx, cfg, templates)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAlertmanagerConfig indicates an expected call of CreateAlertmanagerConfig.
func (mr *MockMimirClientInterfaceMockRecorder) CreateAlertmanagerConfig(ctx, cfg, templates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlertmanagerConfig", reflect.TypeOf((*MockMimirClientInterface)(nil).CreateAlertmanagerConfig), ctx, cfg, templates)
}

// CreateRuleGroup mocks base method.
func (m *MockMimirClientInterface) CreateRuleGroup(ctx context.Context, namespace string, rg rwrulefmt.RuleGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRuleGroup", ctx, namespace, rg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRuleGroup indicates an expected call of CreateRuleGroup.
func (mr *MockMimirClientInterfaceMockRecorder) CreateRuleGroup(ctx, namespace, rg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleGroup", reflect.TypeOf((*MockMimirClientInterface)(nil).CreateRuleGroup), ctx, namespace, rg)
}

// DeleteAlermanagerConfig mocks base method.
func (m *MockMimirClientInterface) DeleteAlermanagerConfig(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlermanagerConfig", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAlermanagerConfig indicates an expected call of DeleteAlermanagerConfig.
func (mr *MockMimirClientInterfaceMockRecorder) DeleteAlermanagerConfig(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlermanagerConfig", reflect.TypeOf((*MockMimirClientInterface)(nil).DeleteAlermanagerConfig), ctx)
}

// DeleteNamespace mocks base method.
func (m *MockMimirClientInterface) DeleteNamespace(ctx context.Context, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNamespace", ctx, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNamespace indicates an expected call of DeleteNamespace.
func (mr *MockMimirClientInterfaceMockRecorder) DeleteNamespace(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespace", reflect.TypeOf((*MockMimirClientInterface)(nil).DeleteNamespace), ctx, namespace)
}

// DeleteRuleGroup mocks base method.
func (m *MockMimirClientInterface) DeleteRuleGroup(ctx context.Context, namespace, groupName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRuleGroup", ctx, namespace, groupName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRuleGroup indicates an expected call of DeleteRuleGroup.
func (mr *MockMimirClientInterfaceMockRecorder) DeleteRuleGroup(ctx, namespace, groupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleGroup", reflect.TypeOf((*MockMimirClientInterface)(nil).DeleteRuleGroup), ctx, namespace, groupName)
}

// GetAlertmanagerConfig mocks base method.
func (m *MockMimirClientInterface) GetAlertmanagerConfig(ctx context.Context) (string, map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlertmanagerConfig", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(map[string]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAlertmanagerConfig indicates an expected call of GetAlertmanagerConfig.
func (mr *MockMimirClientInterfaceMockRecorder) GetAlertmanagerConfig(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlertmanagerConfig", reflect.TypeOf((*MockMimirClientInterface)(nil).GetAlertmanagerConfig), ctx)
}

// ListRules mocks base method.
func (m *MockMimirClientInterface) ListRules(ctx context.Context, namespace string) (map[string][]rwrulefmt.RuleGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRules", ctx, namespace)
	ret0, _ := ret[0].(map[string][]rwrulefmt.RuleGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRules indicates an expected call of ListRules.
func (mr *MockMimirClientInterfaceMockRecorder) ListRules(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRules", reflect.TypeOf((*MockMimirClientInterface)(nil).ListRules), ctx, namespace)
}
